{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Vim-django","body":"Django Vim\r\n===============================================================================\r\n\r\nDjango vim wraps the manage.py and will allow vim to work with your project.\r\n\r\nCommands\r\n-------------------------------------------------------------------------------\r\n\r\n``DjangoAdmin`` will run any command through the ``django-admin.py``\r\ncommand.\r\n\r\n``DjangoManage`` will run the management command for the project\r\n\r\n``DjangoProjectActivate`` will activate the project. This will go through\r\nyour ``g:django_projects`` and find all the django projects. It will also\r\nset up ``DJANGO_SETTINGS_MODULE`` in your environment and the directory\r\nwhere the settings file is stored in your ``PYTHONPATH``.\r\n\r\n``DjangoCreateApp`` will create a new app under your projects base. It will\r\nautocomplete the path. It just needs is a python path such as,\r\n``colinbits.apps.new_app`` this will be created in the folder colinbits,\r\napps, then run the ``django-admin.py`` to create the app there.\r\n\r\n\r\n\r\nMappings\r\n-------------------------------------------------------------------------------\r\n\r\nThere are mappings for easily editing related django files while working on a\r\napp. They all can be changed if you dont like how they are currently mapped.\r\nThere are mappins for (v|views), (u|urls), (a|admin),\r\nand (t|tests). If you want to remap these you can call the function\r\n``django#apps#edit('name_of_file.py', 'split')`` and it will open up\r\nthe file it fineds in a split.\r\n\r\n\r\nConfiguration\r\n-------------------------------------------------------------------------------\r\n\r\n``g:django_projects`` is where your django projects are located.\r\n\r\n``g:django_activate_virtualenv`` when true will activate a virtualenv that\r\nstarts with the same name. An example being. colinbits, is the site, and the\r\nvirtuale env being colinbits.com.\r\n\r\n\r\nCustom Activation of Projects\r\n-------------------------------------------------------------------------------\r\n\r\nSince not everyone uses the default settings file vim-django will allow you to\r\nadd a custom function to activate any project. In your vimrc you can define a\r\nfunction called ``ActivateProject`` it needs to accept one argument. From here\r\nyou can have it activate the project.\r\n\r\nWorking with other Scripts\r\n-------------------------------------------------------------------------------\r\n\r\nNERDTree:\r\n    ``g:django_activate_nerdtree`` when set to 1 will launch nerdtree when\r\n    activating the django project.\r\n\r\nVirtualEnv:\r\n    ``g:django_activate_virtualenv`` when set to 1 will activate the virtual\r\n    env that starts with the same name.\r\n\r\n\r\nInstalling\r\n-------------------------------------------------------------------------------\r\n\r\nI recommend using pathogen or vundle to install this script. Else, you can\r\nput the ``django.vim`` in the plug-ins directory. This script does require\r\npython to be compiled in.\r\n\r\nScreen shots\r\n-------------------------------------------------------------------------------\r\n\r\n![Mangement Command](http://i.imgur.com/NYd9d.png)\r\n\r\n\r\nFAQ\r\n------------------------------------------------------------------------------\r\n\r\n* Working with virtualenv's\r\n    * I actully reccomend installing [vim-virtualenv](https://github.com/jmcantrell/vim-virtualenv)\r\n","google":"","tagline":"Django-vim It does django things in vim"}